### Assigment 2
install.packages("stringi")
install.packages("tidyverse")
install.packages("MLmetrics")


library(stringi)
library(tidyverse)
library(MLmetrics)


f_1 = function(x,y){
  sin(x) ** 10 + cos(10 + y * x) * cos(x)
}
t = seq(-2, 6, length.out = 300)
mesh = outer(t,t,f_1)
mesh = as.data.frame(mesh)
colnames(mesh) = t
rownames(mesh) = t
mesh = as.data.frame(mesh) %>%
  rownames_to_column() %>%
  gather(key, value, -rowname) %>%
  mutate(key = as.numeric(gsub("V", "", key)),
         rowname = rep(t, 300))
ggplot() +
  geom_contour(aes(x = mesh$rowname,
                   y = mesh$key,
                   z = mesh$value,
                   color = ..level..), bins = 40, size = .7) +
  scale_color_gradient2(midpoint=.1, high="#fc4e2a", mid="#ffffcc",
                        low="#41b6c4", space ="Lab" ) +
  xlab("x") + ylab("y") +
  theme_minimal() +
  theme(legend.title = element_blank())




biopsy_data = function(loc = "biopsy.csv"){
  biop = na.omit(read.csv(loc, na.strings = c('?', "NA")))
  train_ids = sample(nrow(biop), size = 300)
  X_train = biop[train_ids, names(biop) %in% stri_paste("V", 1:9)]
  x_test = biop[-train_ids, names(biop) %in% stri_paste("V", 1:9)]
  y_train = biop[train_ids, names(biop) == "class"]
  y_test = biop[-train_ids, names(biop) == "class"]
  return(list(X_train = as.matrix(X_train),
              x_test = as.matrix(x_test),
              y_train = as.matrix(as.integer(y_train)),
              y_test = as.matrix(as.integer(y_test))))
}

bio <- biopsy_data() 

## Changing the structure of 2 and 1 to 1 and 0 for the dummy variables

bio$y_train <- ifelse(bio$y_train  == 2, 1, 0)
bio$y_test <- ifelse(bio$y_test  == 2, 1, 0)
str(bio)

X = matrix(c(1,0,3,1,1,5), ncol = 3)
X = cbind(1, X)
y = c(0, 1)
b0 = 0.5
b = c(b0, 2.5, -1, 2)

b
t(X) 







## Implement eq 9 & 10

z = function(X, beta, beta0){
  # your code for linear transformation

  
  
  b = as.matrix(b)
  
  linear_transformation =  X %*% b  
  
  return(linear_transformation)
}


sigmoid = function(z){
  sigmoid_transformation = 1/ (1 + exp(-z))
  return(sigmoid_transformation)
}

cross_entropy = function(sigmoid, y){
  
  loss = 0
  
  for(i in 1:length(sigmoid)){
    loss = loss + ( (- y[i]) * log(sigmoid[i]) - ((1 - y[i]) * log(1 - sigmoid[i]) )) / length(sigmoid)   
    
  }
  
  return(loss)
}

X = matrix(c(1,0,3,1,1,5), ncol = 3)
X = cbind(1, X)
y = c(0, 1)
b0 = 0.5
b = c(b0, 2.5, -1, 2)
lin = z(X, b)
h = sigmoid(lin)
cross_entropy(h, y)

0 + 0.1 * sigmoid(t(biodata$X_train) %*%  beta) - biodata$y_train

## gradient_descent


View(t(bio$X_train))
View(bio$y_train)

biodata <- biopsy_data() 

## Changing the structure of 2 and 1 to 1 and 0 for the dummy variables

biodata$y_train <- ifelse(biodata$y_train  == 2, 1, 0)
biodata$y_test <- ifelse(biodata$y_test  == 2, 1, 0) 

biodata$X_train <- t(biodata$X_train) 

view(biodata$X_train)

 beta <- as.matrix(rep(0,9))

gradient_descent = function(X, y, epochs, stepsize){
  biodata <- biopsy_data() 
  
  ## Changing the structure of 2 and 1 to 1 and 0 for the dummy variables
  
  biodata$y_train <- ifelse(bio$y_train  == 2, 1, 0)
  biodata$y_test <- ifelse(bio$y_test  == 2, 1, 0) 

  ## Transpose matrix 
  
  biodata$X_train <- t(biodata$X_train)  
  
  ## set initial values 
  
  intercept = 0  
  
  beta <- as.matrix(rep(0,9))  
   
  for(i in 1:epochs) {
  
 beta = beta[,i] - stepsize * (biodata$X_train * (1/ (1 + exp(-z(beta)) ) - biodata$y_train)
    
  } 
  
  return(list(beta = beta,
              intercept = beta0,
              loss = loss))
}


beta <- rep(0,9)

mat2 <- as.matrix(rep(1,9))

View(biodata$X_train)

t(biodata$X_train) %*%  beta 

 
beta - ((0.1 * (biodata$X_train * (sigmoid(z(biodata$X_train, beta)) - 1))) / 9 )

