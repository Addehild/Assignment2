step.001 <- gradient_descent(bio$X_train, bio$y_train, 500, 0.001)
step.01 <- gradient_descent(bio$X_train, bio$y_train, 500, 0.01)
step.05 <- gradient_descent(bio$X_train, bio$y_train, 500, 0.05)

coef <- gradient_descent(bio$X_train, bio$y_train, 500, 0.01)

dataplot <- list( step.001 = step.001$loss, step.01= step.01$loss, step.05 = step.05$loss)

dataplot <- as.tibble(dataplot)

ggplot() + 
  geom_line(mapping = aes(x = 1:length(dataplot$step.001) , y = dataplot$step.001, color = "0.001" )) + 
  geom_line(mapping = aes(x = 1:length(dataplot$step.001) , y = dataplot$step.01, color = "0.01" )) + 
  geom_line(mapping = aes(x = 1:length(dataplot$step.001) , y = dataplot$step.05, color = "0.05" ))  

probabilities = sigmoid(step.001$intercept + bio$x_test %*% step.001$beta)

predict_logistic = function(X, y, beta, beta0, p_cutoff = .5){
  
  ## create where all values will be stored
  probabilities = matrix(0, nrow(X), 2)
  
  probabilities[,1] = sigmoid(z(X, beta, beta0))
  
  ## Loop to 
  for(i in 1:nrow(X)){
    if(probabilities[i,1] > p_cutoff ){
      probabilities[i,2] = 1
    } else{probabilities[i,2] = 0}
  }
  
  predictions = sum(probabilities[,2] == y ) / nrow(X)
  
  return(predictions)
  
}


step.001 <- gradient_descent(bio$X_train, bio$y_train, 300, 0.001)
step.01 <- gradient_descent(bio$X_train, bio$y_train, 300, 0.01)
step.05 <- gradient_descent(bio$X_train, bio$y_train, 300, 0.05)


predict_logistic(bio$x_test, bio$y_test, step.001$beta, step.001$intercept)
predict_logistic(bio$x_test, bio$y_test, step.01$beta, step.01$intercept)
predict_logistic(bio$x_test, bio$y_test, step.05$beta, step.05$intercept)
